
#1 Reset a branch to a prior commit
The following command resets your current branch’s HEAD to the given COMMIT and updates the index. It basically rewinds the state of your branch, then all commits you make going forward write over anything that came after the reset point. If you omit the MODE , it defaults to --mixed :

git reset MODE COMMIT
The options for MODE are:

--soft : does not reset the index file or working tree, but resets HEAD to commit . Changes all files to “Changes to be commited”
--mixed : resets the index but not the working tree and reports what has not been updated
--hard : resets the index and working tree. Any changes to tracked files in the working tree since commit are discarded
--merge : resets the index and updates the files in the working tree that are different between commit and HEAD, but keeps those which are different between the index and working tree
--keep : resets index entries and updates files in the working tree that are different between commit and HEAD. If a file that is different between commit and HEAD has local changes, the reset is aborted


#2 Unstage a file

git reset HEAD FILE-TO-UNSTAGE

#3 Git Revert
Both the git revert and git reset commands undo previous commits. But if you've already pushed your commit to a remote repository, it is recommended that you do not use git reset since it rewrites the history of commits. This can make working on a repository with other developers and maintaining a consistent history of commits very difficult.

Instead, it is better to use git revert, which undoes the changes made by a previous commit by creating an entirely new commit, all without altering the history of commits.


Note: 
Important Note About Hard Resets
Be very careful when using the --hard option with git reset since it resets your commit, staging area and your working directory. 
If this option is not used properly then one can end up losing the code that is written.